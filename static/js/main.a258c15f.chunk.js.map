{"version":3,"sources":["components/Home.js","App.js","index.js"],"names":["Home","toggleMode","changeMode","toggleStart","Container","Rules","Button","onClick","styled","p","div","button","App","startArray","Array","fill","useState","array","setArray","start","setStart","userArray","setUserArray","computerArray","setComputerArray","setChangeMode","firstMove","useCallback","number","Math","floor","random","takenMatches","splice","length","prevArray","useEffect","reset","onRemove","event","num","Number","target","textContent","res","computerRemove","alert","className","map","arr","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAEe,SAASA,EAAT,GAAwD,IAAxCC,EAAuC,EAAvCA,WAAYC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,YACrD,OACE,eAACC,EAAD,WACE,gCACE,qDACA,oDACA,cAACC,EAAD,kPAOF,8BACE,gDAEE,cAACC,EAAD,CAAQC,QAASN,EAAjB,SACGC,EAAa,aAAe,qBAInC,cAACI,EAAD,CAAQC,QAASJ,EAAjB,sBAKN,IAAME,EAAQG,IAAOC,EAAV,mDAGLL,EAAYI,IAAOE,IAAV,4FAOTJ,EAASE,IAAOG,OAAV,0LCuFGC,MA1Hf,WACE,IAAMC,EAAa,IAAIC,MAAM,IAAIC,KAAK,gBACtC,EAA0BC,mBAASH,GAAnC,mBAAOI,EAAP,KAAcC,EAAd,KACA,EAA0BF,oBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA0CN,mBAAS,IAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAAoCR,oBAAS,GAA7C,mBAAOd,EAAP,KAAmBuB,EAAnB,KAEMC,EAAYC,uBAAY,WAC5B,IAAMC,EAASC,KAAKC,MAAM,EAAAD,KAAKE,UAAsB,EAC/CC,EAAef,EAAMgB,OAAOhB,EAAMiB,OAASN,EAAQA,GACzDJ,GAAiB,SAACW,GAAD,4BAAmBA,GAAnB,YAAiCH,SACjD,CAACf,IAEJmB,qBAAU,WACJjB,IAAUjB,GACZwB,MAED,CAACxB,EAAYiB,EAAOO,IAEvB,IAAMW,EAAQ,WACZnB,EAASL,GACTS,EAAa,IACbE,EAAiB,KAEbrB,EAAc,kBAAMiB,GAAUD,IAI9BmB,EAAW,SAACC,GAChB,IAAMC,EAAMC,OAAOF,EAAMG,OAAOC,aAC1BX,EAAef,EAAMgB,OAAOhB,EAAMiB,OAASM,EAAKA,GACtDlB,GAAa,SAACa,GAAD,4BAAmBA,GAAnB,YAAiCH,OAC9C,IAAMY,EAAG,YAAO3B,GAChBC,EAAS0B,GACTC,EAAeN,GAEI,IAAfK,EAAIV,QAA+B,IAAfU,EAAIV,SAC1BY,MAAM,cACNT,IACKnC,GACHwB,MAKAmB,EAAiB,SAACN,GACtB,IAAMC,EAAMC,OAAOF,EAAMG,OAAOC,aAE1BX,EAAef,EAAMgB,OAAOhB,EAAMiB,QAAU,EAAIM,GAAM,EAAIA,GAEhEhB,GAAiB,SAACW,GAAD,4BAAmBA,GAAnB,YAAiCH,OAClDd,EAAS,YAAID,IAEQ,IAAjBA,EAAMiB,SACRY,MAAM,eACNT,IAEKnC,GACHwB,MAKN,OACE,mCACGP,EACC,gCACE,wBACE4B,UAAU,cACVxC,QAAS,WACPJ,IACAkC,KAJJ,0BASA,6BACGd,EAAcyB,KAAI,SAACC,EAAKC,GAAN,OACjB,6BAAiBD,GAARC,QAGb,iDAAoBjC,EAAMiB,UAC1B,6BACGjB,EAAM+B,KAAI,SAACC,EAAKC,GAAN,OACT,6BAAiBD,GAARC,QAIb,qBAAIH,UAAU,UAAd,UACE,6BACE,wBAAQxC,QAAS+B,EAAjB,iBAEDrB,EAAMiB,OAAS,GACd,6BACE,wBAAQ3B,QAAS+B,EAAjB,iBAGHrB,EAAMiB,OAAS,GACd,6BACE,wBAAQ3B,QAAS+B,EAAjB,oBAKN,6BACGjB,EAAU2B,KAAI,SAACC,EAAKC,GAAN,OACb,6BAAiBD,GAARC,WAKf,cAAClD,EAAD,CACEG,YAAaA,EACbF,WAvFW,kBAAMwB,GAAevB,IAwFhCA,WAAYA,OC/GtBiD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a258c15f.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport default function Home({ toggleMode, changeMode, toggleStart }) {\r\n  return (\r\n    <Container>\r\n      <div>\r\n        <h1>Matchesüî•</h1>\r\n        <h2>How to play?‚ùì</h2>\r\n        <Rules>\r\n          Two are playing a game. From a bunch of 25 matches, each takes one,\r\n          two or three matches in turn. The winner is the one who at the end of\r\n          the game - after all the matches are disassembled - will be an even\r\n          number of matches.\r\n        </Rules>\r\n      </div>\r\n      <div>\r\n        <span>\r\n          Choose mode:\r\n          <Button onClick={toggleMode}>\r\n            {changeMode ? \"First mode\" : \"Second mode\"}\r\n          </Button>\r\n        </span>\r\n      </div>\r\n      <Button onClick={toggleStart}>START</Button>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Rules = styled.p`\r\n  text-align: center;\r\n`;\r\nconst Container = styled.div`\r\n  width: 600px;\r\n\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  font-size: 20px;\r\n  margin-bottom: 20px;\r\n  background-color: #fff;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: black;\r\n    color: white;\r\n  }\r\n`;\r\n","import { useState, useEffect, useCallback } from \"react\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n  const startArray = new Array(25).fill(\"ü¶¥\");\n  const [array, setArray] = useState(startArray);\n  const [start, setStart] = useState(false);\n  const [userArray, setUserArray] = useState([]);\n  const [computerArray, setComputerArray] = useState([]);\n  const [changeMode, setChangeMode] = useState(true);\n\n  const firstMove = useCallback(() => {\n    const number = Math.floor(Math.random() * (4 - 1)) + 1;\n    const takenMatches = array.splice(array.length - number, number);\n    setComputerArray((prevArray) => [...prevArray, ...takenMatches]);\n  }, [array]);\n\n  useEffect(() => {\n    if (start && !changeMode) {\n      firstMove();\n    }\n  }, [changeMode, start, firstMove]);\n\n  const reset = () => {\n    setArray(startArray);\n    setUserArray([]);\n    setComputerArray([]);\n  };\n  const toggleStart = () => setStart(!start);\n\n  const toggleMode = () => setChangeMode(!changeMode);\n\n  const onRemove = (event) => {\n    const num = Number(event.target.textContent);\n    const takenMatches = array.splice(array.length - num, num);\n    setUserArray((prevArray) => [...prevArray, ...takenMatches]);\n    const res = [...array];\n    setArray(res);\n    computerRemove(event);\n\n    if (res.length === 1 || res.length === 0) {\n      alert(\"You win!!!\");\n      reset();\n      if (!changeMode) {\n        firstMove();\n      }\n    }\n  };\n\n  const computerRemove = (event) => {\n    const num = Number(event.target.textContent);\n\n    const takenMatches = array.splice(array.length - (4 - num), 4 - num);\n\n    setComputerArray((prevArray) => [...prevArray, ...takenMatches]);\n    setArray([...array]);\n\n    if (array.length === 1) {\n      alert(\"You lose!!!\");\n      reset();\n\n      if (!changeMode) {\n        firstMove();\n      }\n    }\n  };\n\n  return (\n    <>\n      {start ? (\n        <div>\n          <button\n            className=\"button-back\"\n            onClick={() => {\n              toggleStart();\n              reset();\n            }}\n          >\n            üîô\n          </button>\n          <ul>\n            {computerArray.map((arr, index) => (\n              <li key={index}>{arr}</li>\n            ))}\n          </ul>\n          <h2>Matches left : {array.length}</h2>\n          <ul>\n            {array.map((arr, index) => (\n              <li key={index}>{arr}</li>\n            ))}\n          </ul>\n\n          <ul className=\"buttons\">\n            <li>\n              <button onClick={onRemove}>1</button>\n            </li>\n            {array.length > 2 && (\n              <li>\n                <button onClick={onRemove}>2</button>\n              </li>\n            )}\n            {array.length > 3 && (\n              <li>\n                <button onClick={onRemove}>3</button>\n              </li>\n            )}\n          </ul>\n\n          <ul>\n            {userArray.map((arr, index) => (\n              <li key={index}>{arr}</li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <Home\n          toggleStart={toggleStart}\n          toggleMode={toggleMode}\n          changeMode={changeMode}\n        />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n// array.filter((arr)=>)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n//[0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24]\n//[   ^           ^           ^               ^               ^               ^\n"],"sourceRoot":""}