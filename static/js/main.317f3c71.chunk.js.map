{"version":3,"sources":["components/Home.js","components/Matches.js","App.js","index.js"],"names":["Home","toggleMode","changeMode","toggleStart","Container","Rules","Button","onClick","styled","p","div","button","Matches","count","array","Array","fill","map","item","index","App","useState","setCount","start","setStart","userCount","setUserCount","computerCount","setComputerCount","setChangeMode","firstMove","useCallback","number","Math","floor","random","prevCount","useEffect","alert","reset","onRemove","event","num","Number","target","textContent","computerRemove","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAEe,SAASA,EAAT,GAAwD,IAAxCC,EAAuC,EAAvCA,WAAYC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,YACrD,OACE,eAACC,EAAD,WACE,gCACE,qDACA,oDACA,cAACC,EAAD,kPAOF,8BACE,gDAEE,cAACC,EAAD,CAAQC,QAASN,EAAjB,SACGC,EAAa,aAAe,qBAInC,cAACI,EAAD,CAAQC,QAASJ,EAAjB,sBAKN,IAAME,EAAQG,IAAOC,EAAV,mDAGLL,EAAYI,IAAOE,IAAV,4FAOTJ,EAASE,IAAOG,OAAV,0LCtCG,SAASC,EAAT,GAA6B,IAAVC,EAAS,EAATA,MAC1BC,EAAQ,IAAIC,MAAMF,GAAOG,KAAK,gBACpC,OACE,+BACGF,EAAMG,KAAI,SAACC,EAAMC,GAAP,OACT,6BAAiBD,GAARC,MACP,OCsGKC,MAxGf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOR,EAAP,KAAcS,EAAd,KACA,EAA0BD,oBAAS,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KACA,EAAkCH,mBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAA0CL,mBAAS,GAAnD,mBAAOM,EAAP,KAAsBC,EAAtB,KACA,EAAoCP,oBAAS,GAA7C,mBAAOnB,EAAP,KAAmB2B,EAAnB,KAEMC,EAAYC,uBAAY,WAC5B,IAAMC,EAASC,KAAKC,MAAM,EAAAD,KAAKE,UAAsB,EACrDb,EAAST,EAAQmB,GACjBJ,GAAiB,SAACQ,GAAD,OAAeA,EAAYJ,OAC3C,IAEHK,qBAAU,WACJd,IAAUrB,GACZ4B,MAED,CAAC5B,EAAYqB,EAAOO,IACvBO,qBAAU,WACM,IAAVxB,IACFyB,MAAM,eACNC,IACKrC,GACH4B,KAGU,IAAVjB,IACFyB,MAAM,cACNC,IACKrC,GACH4B,OAGH,CAACjB,EAAOX,EAAY4B,IAEvB,IAAMS,EAAQ,WACZjB,EAAS,IACTI,EAAa,GACbE,EAAiB,IAEbzB,EAAc,kBAAMqB,GAAUD,IAI9BiB,EAAW,SAACC,GAChB,IAAMC,EAAMC,OAAOF,EAAMG,OAAOC,aAChCnB,GAAa,SAACU,GAAD,OAAeA,EAAYM,KAExCpB,GAAS,SAACc,GAAD,OAAeA,GAAa,EAAIM,MACzCI,EAAeL,IAEXK,EAAiB,SAACL,GACtB,IAAMC,EAAMC,OAAOF,EAAMG,OAAOC,aAChCjB,GAAiB,SAACQ,GAAD,OAAeA,GAAa,EAAIM,MACjDpB,GAAS,SAACc,GAAD,OAAeA,EAAYM,MAGtC,OACE,mCACGnB,EACC,gCACE,wBACEwB,UAAU,cACVxC,QAAS,WACPJ,IACAoC,KAJJ,0BAUA,cAAC3B,EAAD,CAASC,MAAOc,IAChB,iDAAoBd,KACpB,cAACD,EAAD,CAASC,MAAOA,IAEhB,qBAAIkC,UAAU,UAAd,UACE,6BACE,wBAAQxC,QAASiC,EAAjB,iBAED3B,EAAQ,GACP,6BACE,wBAAQN,QAASiC,EAAjB,iBAGH3B,EAAQ,GACP,6BACE,wBAAQN,QAASiC,EAAjB,oBAKN,cAAC5B,EAAD,CAASC,MAAOY,OAGlB,cAACzB,EAAD,CACEG,YAAaA,EACbF,WAtDW,kBAAM4B,GAAe3B,IAuDhCA,WAAYA,OC9FtB8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.317f3c71.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport default function Home({ toggleMode, changeMode, toggleStart }) {\r\n  return (\r\n    <Container>\r\n      <div>\r\n        <h1>Matchesüî•</h1>\r\n        <h2>How to play?‚ùì</h2>\r\n        <Rules>\r\n          Two are playing a game. From a bunch of 25 matches, each takes one,\r\n          two or three matches in turn. The winner is the one who at the end of\r\n          the game - after all the matches are disassembled - will be an even\r\n          number of matches.\r\n        </Rules>\r\n      </div>\r\n      <div>\r\n        <span>\r\n          Choose mode:\r\n          <Button onClick={toggleMode}>\r\n            {changeMode ? \"First mode\" : \"Second mode\"}\r\n          </Button>\r\n        </span>\r\n      </div>\r\n      <Button onClick={toggleStart}>START</Button>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Rules = styled.p`\r\n  text-align: center;\r\n`;\r\nconst Container = styled.div`\r\n  width: 600px;\r\n\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  font-size: 20px;\r\n  margin-bottom: 20px;\r\n  background-color: #fff;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: black;\r\n    color: white;\r\n  }\r\n`;\r\n","export default function Matches({ count }) {\r\n  const array = new Array(count).fill(\"ü¶¥\");\r\n  return (\r\n    <ul>\r\n      {array.map((item, index) => (\r\n        <li key={index}>{item}</li>\r\n      ))}{\" \"}\r\n    </ul>\r\n  );\r\n}\r\n","import { useState, useEffect, useCallback, useMemo } from \"react\";\nimport Home from \"./components/Home\";\nimport Matches from \"./components/Matches\";\n\nfunction App() {\n  const [count, setCount] = useState(25);\n  const [start, setStart] = useState(false);\n  const [userCount, setUserCount] = useState(0);\n  const [computerCount, setComputerCount] = useState(0);\n  const [changeMode, setChangeMode] = useState(true);\n\n  const firstMove = useCallback(() => {\n    const number = Math.floor(Math.random() * (4 - 1)) + 1;\n    setCount(count - number);\n    setComputerCount((prevCount) => prevCount + number);\n  }, []);\n\n  useEffect(() => {\n    if (start && !changeMode) {\n      firstMove();\n    }\n  }, [changeMode, start, firstMove]);\n  useEffect(() => {\n    if (count === 1) {\n      alert(\"You lose!!!\");\n      reset();\n      if (!changeMode) {\n        firstMove();\n      }\n    }\n    if (count === 0) {\n      alert(\"You win!!!\");\n      reset();\n      if (!changeMode) {\n        firstMove();\n      }\n    }\n  }, [count, changeMode, firstMove]);\n\n  const reset = () => {\n    setCount(25);\n    setUserCount(0);\n    setComputerCount(0);\n  };\n  const toggleStart = () => setStart(!start);\n\n  const toggleMode = () => setChangeMode(!changeMode);\n\n  const onRemove = (event) => {\n    const num = Number(event.target.textContent);\n    setUserCount((prevCount) => prevCount + num);\n\n    setCount((prevCount) => prevCount - (4 - num));\n    computerRemove(event);\n  };\n  const computerRemove = (event) => {\n    const num = Number(event.target.textContent);\n    setComputerCount((prevCount) => prevCount + (4 - num));\n    setCount((prevCount) => prevCount - num);\n  };\n\n  return (\n    <>\n      {start ? (\n        <div>\n          <button\n            className=\"button-back\"\n            onClick={() => {\n              toggleStart();\n              reset();\n            }}\n          >\n            üîô\n          </button>\n\n          <Matches count={computerCount} />\n          <h2>Matches left : {count}</h2>\n          <Matches count={count} />\n\n          <ul className=\"buttons\">\n            <li>\n              <button onClick={onRemove}>1</button>\n            </li>\n            {count > 2 && (\n              <li>\n                <button onClick={onRemove}>2</button>\n              </li>\n            )}\n            {count > 3 && (\n              <li>\n                <button onClick={onRemove}>3</button>\n              </li>\n            )}\n          </ul>\n\n          <Matches count={userCount} />\n        </div>\n      ) : (\n        <Home\n          toggleStart={toggleStart}\n          toggleMode={toggleMode}\n          changeMode={changeMode}\n        />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n// array.filter((arr)=>)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n//[0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24]\n//[   ^           ^           ^               ^               ^               ^\n"],"sourceRoot":""}